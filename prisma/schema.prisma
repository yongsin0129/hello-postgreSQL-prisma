// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//********************************************************************************
//*
//          User 對 UserPreferences 一對一
//          User 對 Post 一對多
//          Post 對 categories 多對多
//*
//*********************************************************************************//
model User {
  id              String           @id @default(uuid()) // @default(uuid())
  age             Int
  name            String
  email           String           @unique
  role            Role             @default(BASIC)
  // role 用 enum 替代寫法 idAdmin  Boolean
  writtenPosts    Post[]           @relation("WrittenPosts") // one to many
  favoritePosts   Post[]           @relation("FavoritePosts") // one to many
  UserPreferences UserPreferences? // 一對一
  // preference      Json?
  // blob Bytes
  // not Unsupported("")

  @@unique([name, age]) // 名字 + 年紀 的組合 定義為唯一的 ， 這段的寫法是說 不可能有同名同年紀的人 ，但現實中有可能
  @@index([email]) // 以後用 email 查詢及排列時速度較快
}

model UserPreferences {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Post {
  id            String     @id @default(uuid())
  // 這邊的 id 也可以用 @@index([title,authorId]) 取代
  title         String
  averageRating Float
  createAt      DateTime   @default(now())
  updataAt      DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id])
  favoritedById String?
  categories    Category[] // many to many  
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  BASIC
  EDITOR
  ADMIN
}
